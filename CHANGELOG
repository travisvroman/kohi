Changelog

- 0.4x
  - Added first pass of Standard UI system, including panel, button, label, and textbox controls.
  - Removed ui_text and replaced with sui_label_control as part of the Standard UI system.
  - Moved DebugConsole to Standard UI.
  - Resolved several DebugConsole bugs, in particular ones involving commands and command history.
  - Modified the Windows build process to use incremental linking to speed things up.
  - Added cursor to textbox control. Fixed typing, backspace, delete and left/right navigation.
  - Added support for stencil buffers/stencil testing.
  - Added support for toggling keyboard key repeats on/off.
  - Added Standard UI clip masks.
  - Fixed various issues around Vulkan dynamic state feature detection.
  - Changed Vulkan backend to require dynamic pipeline state either natively (Vulkan 1.3+) or via extension (VK_EXT_extended_dynamic_state). If this plugin is not available, this backend won't work. This is because the engine requires several forms of dynamic state, potentially all at once, which would mean having a pipeline for each state _on top of_ per topology category, which was becoming unweildy.
  - Updated readme with build instructions and updated prerequisites.
  - Updated VSCode configuration to include new libraries' include paths.
  - Various tweaks to debug console to make it look/act nicer.

- 0.3x - Changelog started at this point to track change list. The major changes here are:
  - Fixed build process for both debug _and_ release builds, including a few required code changes.
  - Release builds now properly make no-ops out of KTRACE and KDEBUG log messages.
  - Release builds are now set to use O2 level compiler optimizations.
  - Debug builds are now set to use O0 level compiler optimizations explicitly (although -g did this informally already).
  - Removed all geometry logic and tracking from the renderer backend and correctly handle this in the frontend.
  - Moved geometry vertex and index buffers to the renderer frontend.
  - Removed the concept of geometry internal data, since it no longer has graphics API-specific data (and really never did).
  - Geometry itself now manages the concept of vertex/index buffer offsets.
  - Moved version console output to systems_manager, right after logging is instantiated so it appears at the top of the logs.
  - Overhauled the implementation of identifiers to now be a struct which holds a u64, generated by a newly Mersenne Twister random number generator. This new refactoring will also ease the process of (de)serialization.
  - Anything using a form of "unique id" should now be using the refactored identifiers.
  - Fixed scene unloading by handling this state in application_prepare_frame in testbed_lib.
  - Fixed a state checking issue in simple scene updates to trigger an unload and return if an unload has been requested.
  - Added device pixel ratio logic for Windows and macOS.
  - Added event handler for monitor changing on macOS. This helps capture DPI changes when switching monitors.
    
- 0.2x - Added audio plugin. Build versioning wasn't fixed yet, though, so this wasn't a readily visible
    change in version number. Also recieved a plethora of nondescript bugfixes and performance tweaks.

- 0.1x - Initial versions of the engine including all changes up to ~October 2023. Includes 
    basic functionality and some basic engine sub-systems.

